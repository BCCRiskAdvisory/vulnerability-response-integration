<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_953551_edgescan.VulnerabilityResponseClient</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Client for working with the Vulnerability Response databases.</description>
        <name>VulnerabilityResponseClient</name>
        <script><![CDATA[var VulnerabilityResponseClient = Class.create();
VulnerabilityResponseClient.prototype = {
    initialize: function() {
    },
	
	getVulnerabilityEntry: function(edgescanDefinitionId){
		var gr = new GlideRecord('sn_vul_third_party_entry');
		gr.addQuery('id', 'ESID-' + edgescanDefinitionId);
		gr.query();
		return gr.next() ? gr : false;
	},
	
	createVulnerabilityEntry: function(edgescanDefinition){
		var gr = new GlideRecord('sn_vul_third_party_entry');
		gr.initialize();
		gr.id = 'ESID-' + edgescanDefinition.id.toString();
		gr.category = 'Edgescan';
		gr.source = 'Edgescan';
		gr.name = edgescanDefinition.name;
		gr.summary = edgescanDefinition.name;
		gr.threat = edgescanDefinition.description;
		gr.solution = edgescanDefinition.remediation;
		gr.v3_attack_vector = 'NETWORK';
		gr.source_risk_rating = edgescanDefinition.risk;
		gr.source_severity = edgescanDefinition.severity;
		gr.normalized_severity = this.getNormalizedSeverity(edgescanDefinition.severity);
		if(edgescanDefinition.cwes != []){gr.cwe_id = edgescanDefinition.cwes[0];}
		gr.insert();
		return gr;
	},
	
	updateVulnerabilityEntry: function(vulnerabilityEntry, edgescanDefinition) {
		vulnerabilityEntry.category = 'Edgescan';
		vulnerabilityEntry.source = 'Edgescan';
		vulnerabilityEntry.name = edgescanDefinition.name;
		vulnerabilityEntry.summary = edgescanDefinition.name;
		vulnerabilityEntry.threat = edgescanDefinition.description;
		vulnerabilityEntry.solution = edgescanDefinition.remediation;
		vulnerabilityEntry.v3_attack_vector = 'NETWORK';
		vulnerabilityEntry.source_risk_rating = edgescanDefinition.risk;
		vulnerabilityEntry.source_severity = edgescanDefinition.severity;
		vulnerabilityEntry.normalized_severity = this.getNormalizedSeverity(edgescanDefinition.severity);
		if(edgescanDefinition.cwes != []){vulnerabilityEntry.cwe_id = edgescanDefinition.cwes[0];}
		vulnerabilityEntry.update();
		return vulnerabilityEntry;
	},
	
	getNormalizedSeverity: function(source_severity) {
		var gr = new GlideRecord('sn_vul_severity_map');
		gr.addQuery('source', 'Edgescan');
		gr.addQuery('source_value', source_severity);
		gr.query();
		return gr.next() ? gr.target_value : 5;
	},

    type: 'VulnerabilityResponseClient'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-01-18 12:26:29</sys_created_on>
        <sys_id>176af1941be421105a8fdc6cdc4bcb20</sys_id>
        <sys_name>VulnerabilityResponseClient</sys_name>
        <sys_package display_value="Edgescan Vulnerability Library" source="x_953551_edgescan">8dd569541b2021105a8fdc6cdc4bcbb7</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Edgescan Vulnerability Library">8dd569541b2021105a8fdc6cdc4bcbb7</sys_scope>
        <sys_update_name>sys_script_include_176af1941be421105a8fdc6cdc4bcb20</sys_update_name>
    </sys_script_include>
</record_update>
